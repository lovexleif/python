Requests: HTTP for Humans

Release v2.18.4. (Installation)
https://img.shields.io/pypi/l/requests.svg https://img.shields.io/pypi/wheel/requests.svg https://img.shields.io/pypi/pyversions/requests.svg codecov.io https://img.shields.io/badge/Say%20Thanks!-ðŸ¦‰-1EAEDB.svg

Requests is the only Non-GMO HTTP library for Python, safe for human consumption.

Note

The use of Python 3 is highly preferred over Python 2. Consider upgrading your applications and infrastructure if you find yourself still using Python 2 in production today. If you are using Python 3, congratulations â€” you are indeed a person of excellent taste. â€”Kenneth Reitz

Behold, the power of Requests:

>>> r = requests.get('https://api.github.com/user', auth=('user', 'pass'))
>>> r.status_code
200
>>> r.headers['content-type']
'application/json; charset=utf8'
>>> r.encoding
'utf-8'
>>> r.text
u'{"type":"User"...'
>>> r.json()
{u'private_gists': 419, u'total_private_repos': 77, ...}

See similar code, sans Requests.

Requests allows you to send organic, grass-fed HTTP/1.1 requests, without the need for manual labor. There's no need to manually add query strings to your URLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling are 100% automatic, thanks to urllib3.
User Testimonials

Twitter, Spotify, Microsoft, Amazon, Lyft, BuzzFeed, Reddit, The NSA, Her Majesty's Government, Google, Twilio, Runscope, Mozilla, Heroku, PayPal, NPR, Obama for America, Transifex, Native Instruments, The Washington Post, SoundCloud, Kippt, Sony, and Federal U.S. Institutions that prefer to be unnamed claim to use Requests internally.

Armin Ronacherâ€”
    Requests is the perfect example how beautiful an API can be with the right level of abstraction.
Matt DeBoardâ€”
    I'm going to get Kenneth Reitz's Python requests module tattooed on my body, somehow. The whole thing.
Daniel Greenfeldâ€”
    Nuked a 1200 LOC spaghetti code library with 10 lines of code thanks to Kenneth Reitz's request library. Today has been AWESOME.
Kenny Meyersâ€”
    Python HTTP: When in doubt, or when not in doubt, use Requests. Beautiful, simple, Pythonic.

Requests is one of the most downloaded Python packages of all time, pulling in over 13,000,000 downloads every month. All the cool kids are doing it!
Beloved Features

Requests is ready for today's web.

    Keep-Alive & Connection Pooling
    International Domains and URLs
    Sessions with Cookie Persistence
    Browser-style SSL Verification
    Automatic Content Decoding
    Basic/Digest Authentication
    Elegant Key/Value Cookies
    Automatic Decompression
    Unicode Response Bodies
    HTTP(S) Proxy Support
    Multipart File Uploads
    Streaming Downloads
    Connection Timeouts
    Chunked Requests
    .netrc Support

Requests officially supports Python 2.6â€“2.7 & 3.4â€“3.7, and runs great on PyPy.
The User Guide

This part of the documentation, which is mostly prose, begins with some background information about Requests, then focuses on step-by-step instructions for getting the most out of Requests.

    Introduction
        Philosophy
        Apache2 License
        Requests License
    Installation of Requests
        $ pipenv install requests
        Get the Source Code
    Quickstart
        Make a Request
        Passing Parameters In URLs
        Response Content
        Binary Response Content
        JSON Response Content
        Raw Response Content
        Custom Headers
        More complicated POST requests
        POST a Multipart-Encoded File
        Response Status Codes
        Response Headers
        Cookies
        Redirection and History
        Timeouts
        Errors and Exceptions
    Advanced Usage
        Session Objects
        Request and Response Objects
        Prepared Requests
        SSL Cert Verification
        Client Side Certificates
        CA Certificates